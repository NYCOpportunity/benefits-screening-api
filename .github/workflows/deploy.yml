name: Deploy Lambda Function

on:
  push:
    branches: [ prod, stg ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  LAMBDA_FUNCTION_NAME_PROD: benefits-screening-api-prod
  LAMBDA_FUNCTION_NAME_STG: Benefits-Screening-API-stg

permissions:
  contents: read
  id-token: write

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Set up Python
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: '3.13'

  #   - name: Install uv
  #     uses: astral-sh/setup-uv@v4
  #     with:
  #       version: "latest"

  #   - name: Install dependencies
  #     run: uv sync --dev

  #   - name: Run tests
  #     run: uv run pytest

  deploy-production:
    # needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install production dependencies
      run: uv sync --no-dev

    - name: Debug AWS credentials
      run: |
        echo "Checking if AWS credentials are available..."
        if [ -z "$AWS_ACCESS_KEY_ID" ]; then
          echo "ERROR: AWS_ACCESS_KEY_ID is empty or not set!"
        else
          echo "AWS_ACCESS_KEY_ID is set (length: ${#AWS_ACCESS_KEY_ID})"
        fi
        if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
          echo "ERROR: AWS_SECRET_ACCESS_KEY is empty or not set!"
        else
          echo "AWS_SECRET_ACCESS_KEY is set (length: ${#AWS_SECRET_ACCESS_KEY})"
        fi
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Create deployment package
      run: |
        # Create a clean directory for the package
        mkdir -p package
        
        # Export dependencies to package directory
        uv export --no-dev --format requirements-txt > requirements.txt
        pip install -r requirements.txt -t package/
        
        # Copy your source code to package (adjust paths as needed for your project structure)
        if [ -d "src" ]; then
          cp -r src/* package/
        else
          cp -r *.py package/ 2>/dev/null || true
        fi
        
        # Create zip file
        cd package
        zip -r ../lambda-deployment.zip . -x "*.pyc" "*__pycache__*" "*.git*" "*.github*" "tests/*" "test_*"
        cd ..

    - name: Deploy to Production Lambda
      run: |
        aws lambda update-function-code \
          --function-name benefits-screening-api-prod \
          --zip-file fileb://lambda-deployment.zip

    - name: Update Production Lambda configuration
      run: |
        aws lambda update-function-configuration \
          --function-name benefits-screening-api-prod \
          --handler src.main.lambda_handler \
          --environment Variables="{
            ENVIRONMENT=production,
            LOG_LEVEL=INFO
          }" \
          --timeout 30 \
          --memory-size 512 \
          --runtime python3.13

    - name: Wait for function update
      run: |
        aws lambda wait function-updated \
          --function-name benefits-screening-api-prod

    - name: Test Production Lambda function
      run: |
        aws lambda invoke \
          --function-name benefits-screening-api-prod \
          --payload '{"test": true}' \
          --cli-binary-format raw-in-base64-out \
          response.json
        
        cat response.json
        
        # Check if invocation was successful
        if grep -q "errorMessage" response.json; then
          echo "Lambda function test failed"
          exit 1
        fi

  deploy-staging:
    # needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/stg' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install production dependencies
      run: uv sync --no-dev

    - name: Debug AWS credentials
      run: |
        echo "Checking if AWS credentials are available..."
        if [ -z "$AWS_ACCESS_KEY_ID" ]; then
          echo "ERROR: AWS_ACCESS_KEY_ID is empty or not set!"
        else
          echo "AWS_ACCESS_KEY_ID is set (length: ${#AWS_ACCESS_KEY_ID})"
        fi
        if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
          echo "ERROR: AWS_SECRET_ACCESS_KEY is empty or not set!"
        else
          echo "AWS_SECRET_ACCESS_KEY is set (length: ${#AWS_SECRET_ACCESS_KEY})"
        fi
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Create deployment package
      run: |
        mkdir -p package
        uv export --no-dev --format requirements-txt > requirements.txt
        pip install -r requirements.txt -t package/
        
        # Copy your source code to package (adjust paths as needed for your project structure)
        if [ -d "src" ]; then
          cp -r src/* package/
        else
          cp -r *.py package/ 2>/dev/null || true
        fi
        
        cd package
        zip -r ../lambda-deployment.zip . -x "*.pyc" "*__pycache__*" "*.git*" "*.github*" "tests/*" "test_*"
        cd ..

    - name: Deploy to Staging Lambda
      run: |
        aws lambda update-function-code \
          --function-name Benefits-Screening-API-stg \
          --zip-file fileb://lambda-deployment.zip

    - name: Update Staging Lambda configuration
      run: |
        aws lambda update-function-configuration \
          --function-name Benefits-Screening-API-stg \
          --handler src.main.lambda_handler \
          --environment Variables="{
            ENVIRONMENT=staging,
            LOG_LEVEL=DEBUG
          }" \
          --timeout 60 \
          --memory-size 256 \
          --runtime python3.13

    - name: Wait for function update
      run: |
        aws lambda wait function-updated \
          --function-name Benefits-Screening-API-stg

    - name: Test Staging Lambda function
      run: |
        aws lambda invoke \
          --function-name Benefits-Screening-API-stg \
          --payload '{"test": true}' \
          --cli-binary-format raw-in-base64-out \
          response.json
        
        cat response.json
        
        # Check if invocation was successful
        if grep -q "errorMessage" response.json; then
          echo "Staging Lambda function test failed"
          exit 1
        fi